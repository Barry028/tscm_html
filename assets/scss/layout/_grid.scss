@charset "utf-8";

/** –––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Layout > Grid
// ––––––––––––––––––––––––––––––––––––––––––––––––––––––––– */
.cf {
    @include clearfix;
}
%cf {
    @include clearfix;
}

.clear-fix {
    @include clearfix;
}



@media (max-width: $screen-md-min) {
    .clear-fix-md {
        @include clearfix;
    }
}

@media (max-width: $screen-sm-min) {
    .clear-fix-sm {
        @include clearfix;
    }
}

@media (max-width: $screen-xs-min) {
    .clear-fix-xs {
        @include clearfix;
    }
}

// Framework grid generation
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }

    #{$list} {
        min-height: 1px;
        padding-left: pxTorem(ceil($grid-gutter-width));
        padding-right: pxTorem(floor($grid-gutter-width));
    }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }

    #{$list} {
        float: left;
    }
}

@mixin calc-grid-column($index, $class, $type) {
    @if $type == width and $index > 0 {
        .col-#{$class}-#{$index} {
            width: percentage($index / $grid-columns);
        }
    }

    @if $type == push and $index > 0 {
        .col-#{$class}-push-#{$index} {
            left: percentage($index / $grid-columns);
        }
    }

    @if $type == push and $index == 0 {
        .col-#{$class}-push-0 {
            left: auto;
        }
    }

    @if $type == pull and $index > 0 {
        .col-#{$class}-pull-#{$index} {
            right: percentage($index / $grid-columns);
        }
    }

    @if $type == pull and $index == 0 {
        .col-#{$class}-pull-0 {
            right: auto;
        }
    }

    @if $type == offset {
        .col-#{$class}-offset-#{$index} {
            margin-left: percentage($index / $grid-columns);
        }
    }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}

// Create grid for specific class
@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);

    // @include loop-grid-columns($grid-columns, $class, pull);
    // @include loop-grid-columns($grid-columns, $class, push);
    // @include loop-grid-columns($grid-columns, $class, offset);
}

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: pxTorem(ceil($grid-gutter-width));
    padding-right: pxTorem(floor($grid-gutter-width));

    @include clearfix;
}

@mixin container-fluid($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: pxTorem(ceil($grid-gutter-width * 2));
    padding-right: pxTorem(floor($grid-gutter-width * 2));

    @include clearfix;
}

@mixin content($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: pxTorem(ceil($grid-gutter-width / 2));
    padding-right: pxTorem(floor($grid-gutter-width / 2));

    @include clearfix;
}

@mixin pagecnt($gutter: $grid-gutter-width) {
    margin-right: pxTorem(ceil($grid-gutter-width / 2));
    margin-left: pxTorem(ceil($grid-gutter-width));

    @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
    margin-left: pxTorem(ceil($gutter / 2));
    margin-right: pxTorem(floor($gutter / 2));

    @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
    float: left;
    width: percentage($columns / $grid-columns);
    min-height: 1px;
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
}

// @mixin make-xs-column-offset($columns) {
//   margin-left: percentage(($columns / $grid-columns));
// }
// @mixin make-xs-column-push($columns) {
//   left: percentage(($columns / $grid-columns));
// }
// @mixin make-xs-column-pull($columns) {
//   right: percentage(($columns / $grid-columns));
// }

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
    min-height: 1px;
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;

    @media (min-width: $screen-sm-min) {
        float: left;
        width: percentage($columns / $grid-columns);
    }
}

// @mixin make-sm-column-offset($columns) {
//   @media (min-width: $screen-sm-min) {
//     margin-left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-sm-column-push($columns) {
//   @media (min-width: $screen-sm-min) {
//     left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-sm-column-pull($columns) {
//   @media (min-width: $screen-sm-min) {
//     right: percentage(($columns / $grid-columns));
//   }
// }

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
    min-height: 1px;
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;

    @media (max-width: $screen-md-min) {
        float: left;
        width: percentage($columns / $grid-columns);
    }
}

// @mixin make-md-column-offset($columns) {
//   @media (max-width: $screen-md-min) {
//     margin-left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-md-column-push($columns) {
//   @media (max-width: $screen-md-min) {
//     left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-md-column-pull($columns) {
//   @media (max-width: $screen-md-min) {
//     right: percentage(($columns / $grid-columns));
//   }
// }

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
    min-height: 1px;
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;

    @media (max-width: $screen-lg-min) {
        float: left;
        width: percentage($columns / $grid-columns);
    }
}

// @mixin make-lg-column-offset($columns) {
//   @media (max-width: $screen-lg-min) {
//     margin-left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-lg-column-push($columns) {
//   @media (max-width: $screen-lg-min) {
//     left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-lg-column-pull($columns) {
//   @media (max-width: $screen-lg-min) {
//     right: percentage(($columns / $grid-columns));
//   }
// }

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }

    #{$list} {
        min-height: 1px;
        padding-left: pxTorem(ceil($grid-gutter-width / 2));
        padding-right: pxTorem(floor($grid-gutter-width / 2));
    }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }

    #{$list} {
        float: left;
    }
}

@mixin calc-grid-column($index, $class, $type) {
    @if $type == width and $index > 0 {
        .col-#{$class}-#{$index} {
            width: percentage($index / $grid-columns);
        }
    }

    // @if ($type == push) and ($index > 0) {
    //   .col-#{$class}-push-#{$index} {
    //     left: percentage(($index / $grid-columns));
    //   }
    // }
    // @if ($type == push) and ($index == 0) {
    //   .col-#{$class}-push-0 {
    //     left: auto;
    //   }
    // }
    // @if ($type == pull) and ($index > 0) {
    //   .col-#{$class}-pull-#{$index} {
    //     right: percentage(($index / $grid-columns));
    //   }
    // }
    // @if ($type == pull) and ($index == 0) {
    //   .col-#{$class}-pull-0 {
    //     right: auto;
    //   }
    // }
    // @if ($type == offset) {
    //   .col-#{$class}-offset-#{$index} {
    //     margin-left: percentage(($index / $grid-columns));
    //   }
    // }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}

// Create grid for specific class
@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);

    // @include loop-grid-columns($grid-columns, $class, pull);
    // @include loop-grid-columns($grid-columns, $class, push);
    // @include loop-grid-columns($grid-columns, $class, offset);
}

// Container widths
.container {
    @include container-fixed;

    max-width: 1366px;

    @media (max-width: $screen-sm-min) {
        max-width: $container-sm;
    }

    @media (max-width: $screen-md-min) {
        max-width: $container-md;
        padding-right: .5rem;
        padding-left: .5rem;
    }
}

.container-fluid {
    @include container-fluid;
}

// Row
.row {
    @include make-row;
}

// Columns
@include make-grid-columns;

// Extra large grid
@include make-grid(lg);

// SmallMedium  grid
@media (max-width: $screen-md-min) {
    @include make-grid(md);
}

// Small grid
@media (max-width: $screen-sm-min) {
    @include make-grid(sm);
}

// xsmall grid
@media (max-width: $screen-xs-min) {
    @include make-grid(xs);
}